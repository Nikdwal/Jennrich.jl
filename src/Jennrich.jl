module Jennrich
using Manifolds, LinearAlgebra

export jennrich

"""
	jennrich(A, r :: Int)

Compute the rank r canonical polyadic decomposition of A using a pencil-based algorithm
"""
jennrich(A, r :: Int) = jennrich(A, ones(Int, r))

"""
	jennrich(A, L :: AbstractVector{Int})

Compute the (L·µ£,L·µ£,1)-BTD of A using a pencil-based algorithm
"""
function jennrich(ùîó :: AbstractArray{<:Real, 3}, L :: AbstractVector{Int})
	n‚ÇÅ, n‚ÇÇ, n‚ÇÉ = size(ùîó)
	@assert n‚ÇÅ ‚â• sum(L) && n‚ÇÇ ‚â• sum(L)

	ùîóTuck = TuckerPoint(ùîó, (sum(L), sum(L), 2))
	ùîä     = ùîóTuck.hosvd.core

	evd   = eigen(ùîä[:,:,1] * ùîä[:,:,2]^-1)
	makeReal!(evd)
	A :: Matrix{eltype(ùîó)} = ùîóTuck.hosvd.U[1] * real(evd.vectors)

	B‚®ÄC   = (A \ reshape(ùîó, n‚ÇÅ, :))'
	B     = Matrix{eltype(A)}(undef, n‚ÇÇ, sum(L))
	C     = Matrix{eltype(A)}(undef, n‚ÇÉ, length(L))
	blkInd = cumsum(vcat(1, L))
	for i ‚àà 1:length(L)
		# B·µ¢‚®ÄC·µ¢ is the concatenation of rank 1 matrices B·µ¢[:,j] ‚äó c·µ¢
		# Compute the rank 1 SVD of these matrices (they all have c·µ¢ as a right singular vector)
		from, to = blkInd[i], blkInd[i+1] - 1
		B·µ¢‚®ÄC·µ¢ = B‚®ÄC[:,from:to] 
		rk1mtx = reshape(B·µ¢‚®ÄC·µ¢ * randn(L[i]), (n‚ÇÇ, n‚ÇÉ))
		C[:,i] = leftSingularVector(rk1mtx', maxiter=2) # right singular vector
		for j = 1:L[i]
			rk1mtx = reshape(B·µ¢‚®ÄC·µ¢[:,j], (n‚ÇÇ, n‚ÇÉ))
			B[:,from-1+j] = rk1mtx * C[:,i]  # left singular vector * singular value
		end
	end
	A, B, C
end

# Compute the dominant left singular vector of A
# This only works well if the second singular value of A is significantly less than the first
function leftSingularVector(A; maxiter=1)
	œÉv = randn(size(A,2))
	u = normalize(A * œÉv)
	for i = 1:maxiter - 1
		mul!(œÉv, A', u)
		normalize!(mul!(u, A, œÉv))
	end
	u
end

function makeReal!(evd::Union{GeneralizedEigen, Eigen})
	Œª, V = evd
	i = firstindex(Œª)
	while i ‚â§ lastindex(Œª)
		if imag(Œª[i]) ‚â† 0
			Œª[i+1] = conj(Œª[i+1])
			V[:,i] = real.(V[:,i])
			V[:,i+1] = imag.(V[:,i+1])
			i += 1
		end
		i += 1
	end
	evd
end

end # module
